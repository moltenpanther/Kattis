import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;

public class Kattis {
	
    public static void main(String[] args) throws IOException {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    	int num = Integer.parseInt(br.readLine());
    	boolean[] visited = new boolean[num];
        
    	LinkedList<Edge> roads = new LinkedList<Edge>();
        PriorityQueue<Edge> queue = new PriorityQueue<Edge>();
        
        // Make weighted edges from the adjacency matrix
    	for(int i = 0; i < num; i++) {
    		
    		String[] line = br.readLine().split(" ");
    		for(int j = i + 1; j < num; j++) {
    			int weight = Integer.parseInt(line[j]);
    			Edge edge = new Edge(weight, i, j);
    			queue.add(edge);
    		}
    	}
        
    	// Making a minimum spanning tree
        int count = 0;
        while(count < num - 1) {
        	
        	Edge edge = queue.remove();        	
        	
        	if(!(visited[edge.from] && visited[edge.to])) {        		
        		roads.add(edge);
        		visited[edge.from] = true;
        		visited[edge.to] = true;
        		count++;
        	}
        }

        Collections.sort(roads, Comparator
        		.comparingDouble(Edge::getFrom)
        		.thenComparingInt(Edge::getTo));

        // Output
        for(Edge edge : roads) {
        	System.out.println(edge);
        }
   		
    	br.close();
    }

}

class Edge implements Comparable<Edge>{
	
	int from;
	int to;
	int weight;

	public Edge(int weight, int from, int to) {
		this.weight = weight;
		this.from = from;
		this.to = to;
	}
	
	public int getWeight() {
		return weight;
	}
	
	public void setWeight(int weight) {
		this.weight = weight;
	}
	
	public int getFrom() {
		return from;
	}
	
	public void setFrom(int from) {
		this.from = from;
	}
	
	public int getTo() {
		return to;
	}
	
	public void setTo(int to) {
		this.to = to;
	}
	
	@Override
	public String toString() {
		return (from + 1) + " " + (to + 1);
	}

	@Override
	public int compareTo(Edge o) {
		return Integer.compare(this.weight, o.weight);
	}
	
}
